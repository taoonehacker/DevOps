{"version":3,"sources":["webpack:///./src/account/account-routing.module.ts","webpack:///./src/account/account.component.html","webpack:///./src/account/account.component.less","webpack:///./src/account/account.component.ts","webpack:///./src/account/account.module.ts","webpack:///./src/account/forget/forget-user-dialog.component.html","webpack:///./src/account/forget/forget-user-dialog.component.ts","webpack:///./src/account/layout/account-languages.component.html","webpack:///./src/account/layout/account-languages.component.less","webpack:///./src/account/layout/account-languages.component.ts","webpack:///./src/account/login/login.component.html","webpack:///./src/account/login/login.component.less","webpack:///./src/account/login/login.component.ts","webpack:///./src/account/login/login.service.ts","webpack:///./src/account/register/register.component.html","webpack:///./src/account/register/register.component.ts","webpack:///./src/account/reset/reset-password-dialog.component.html","webpack:///./src/account/reset/reset-password-dialog.component.ts","webpack:///./src/account/tenant/tenant-change-dialog.component.html","webpack:///./src/account/tenant/tenant-change-dialog.component.ts","webpack:///./src/account/tenant/tenant-change.component.html","webpack:///./src/account/tenant/tenant-change.component.ts","webpack:///./src/shared/AppEnums.ts","webpack:///./src/shared/helpers/UrlHelper.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAyC;AACM;AACU;AACS;AACX;AAoBvD;IAAA;IAAoC,CAAC;IAAxB,oBAAoB;QAjBhC,8DAAQ,CAAC;YACN,OAAO,EAAE;gBACL,4DAAY,CAAC,QAAQ,CAAC;oBAClB;wBACI,IAAI,EAAE,EAAE;wBACR,SAAS,EAAE,mEAAgB;wBAC3B,QAAQ,EAAE;4BACN,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,qEAAc,EAAE;4BAC5C,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,8EAAiB,EAAE;yBACrD;qBACJ;iBACJ,CAAC;aACL;YACD,OAAO,EAAE;gBACL,4DAAY;aACf;SACJ,CAAC;OACW,oBAAoB,CAAI;IAAD,2BAAC;CAAA;AAAJ;;;;;;;;;;;;ACxBjC,gHAAgH,KAAK,qBAAqB,yXAAyX,GAAG,aAAa,2BAA2B,aAAa,2D;;;;;;;;;;;ACA3jB,0CAA0C,qBAAqB,GAAG,8BAA8B,gCAAgC,gCAAgC,qBAAqB,GAAG,gCAAgC,oBAAoB,GAAG,+CAA+C,2jC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA7L;AAC5C;AACS;AAS9D;IAAsC,oCAAgB;IAOlD,0BACI,QAAkB,EACV,aAA2B;QAFvC,YAII,kBAAM,QAAQ,CAAC,SAIlB;QANW,mBAAa,GAAb,aAAa,CAAc;QAInC,KAAI,CAAC,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC5C,KAAI,CAAC,WAAW,GAAG,KAAI,CAAC,UAAU,CAAC,WAAW,CAAC,OAAO,GAAG,IAAI,GAAG,KAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC;;IACrI,CAAC;IAED,2CAAgB,GAAhB;QACI,OAAO,GAAG,CAAC,YAAY,CAAC,SAAS,CAAC;IACtC,CAAC;IAED,mCAAQ,GAAR;QACI,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;IAC1C,CAAC;IAvBQ,gBAAgB;QAP5B,+DAAS,CAAC;YACP,qGAAuC;YAIvC,aAAa,EAAE,+DAAiB,CAAC,IAAI;;SACxC,CAAC;yCASgB,sDAAQ;YACK,iEAAY;OAT9B,gBAAgB,CAwB5B;IAAD,uBAAC;CAAA,CAxBqC,2EAAgB,GAwBrD;AAxB4B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXkB;AACN;AACI;AACD;AACY;AAEZ;AAEA;AAEoB;AAEkB;AAE7B;AAEE;AACE;AACS;AACe;AAE5B;AAErD,UAAU;AAC+D;AACa;AAEC;AAEvF,yCAAyC;AAC6C;AAuCtF;IAAA;IAEA,CAAC;IAFY,aAAa;QArCzB,8DAAQ,CAAC;YACN,OAAO,EAAE;gBACL,4DAAY;gBACZ,0DAAW;gBACX,qEAAgB;gBAChB,yDAAW;gBACX,yDAAS;gBACT,kEAAY;gBACZ,+FAAkB;gBAClB,4EAAoB;gBACpB,yDAAW,CAAC,OAAO,EAAE;aACxB;YACD,YAAY,EAAE;gBACV,oEAAgB;gBAChB,sEAAc;gBACd,+EAAiB;gBACjB,8FAAyB;gBACzB,SAAS;gBACT,sFAAqB;gBACrB,mGAA2B;gBAC3B,qGAAwB;gBAExB,gBAAgB;gBAChB,sGAAuB;aAC1B;YACD,SAAS,EAAE;gBACP,kEAAY;aACf;YACD,eAAe,EAAE;gBACb,SAAS;gBACT,mGAA2B;gBAC3B,qGAAwB;gBAExB,gBAAgB;gBAChB,sGAAuB;aAC1B;SACJ,CAAC;OACW,aAAa,CAEzB;IAAD,oBAAC;CAAA;AAFyB;;;;;;;;;;;;ACrE1B,iIAAiI,iCAAiC,yDAAyD,aAAa,wjCAAwjC,GAAG,iPAAiP,2BAA2B,sXAAsX,yBAAyB,0QAA0Q,uBAAuB,+D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAnqE;AACQ;AAC1B;AACI;AAEgB;AAIX;AACqC;AAiBxF;IAA8C,4CAAgB;IAOtD,kCACE,QAAkB,EACX,cAAqC,EACpC,OAAkB,EAClB,UAAkD;QAJ5D,YAOE,kBAAM,QAAQ,CAAC,SAChB;QANQ,oBAAc,GAAd,cAAc,CAAuB;QACpC,aAAO,GAAP,OAAO,CAAW;QAClB,gBAAU,GAAV,UAAU,CAAwC;QAT5D,YAAM,GAAG,KAAK,CAAC;QACf,YAAM,GAAc,IAAI,iFAAS,EAAE,CAAC;;IAYpC,CAAC;IAED,2CAAQ,GAAR;QACE,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAC,KAAK,CAAC;IAC7B,CAAC;IACD,uCAAI,GAAJ;QAAA,iBA2BC;QA1BC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QACrC,IAAI,CAAC,cAAc;aAChB,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAC,IAAI,CAAC,YAAY,EAAC,IAAI,CAAC,QAAQ,CAAC;aACxD,IAAI,CACH,+DAAQ,CAAC;YAEP,KAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACtB,CAAC,CAAC,CACH;aACA,SAAS,CAAC,UAAC,IAAI;YAEZ,IAAG,IAAI,CAAC,KAAK,IAAE,CAAC,EAChB;gBACE,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,oBAAoB,CAAC;gBACzC,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBACjB,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,qGAAuB,EAAC,EAAC,IAAI,EAAC,IAAI,CAAC,EAAE,EAAC,CAAC,CAAC;aAC3D;iBAED;gBACE,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,mCAAmC,CAAC;aACvD;QACL,CAAC,CAAC,CAAC;QACH,mDAAmD;QACnD,sBAAsB;QACtB,MAAM;IACV,CAAC;IAED,wCAAK,GAAL,UAAM,MAAW;QACf,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAnDI,wBAAwB;QAbpC,+DAAS,CAAC;YACP,kIAAkD;;SAWrD,CAAC;yCASkB,sDAAQ;YACK,6FAAqB;YAC3B,2DAAS;YACN,8DAAY;OAX7B,wBAAwB,CAoD9B;IAAD,+BAAC;CAAA,CApDuC,2EAAgB,GAoDvD;AApD8B;;;;;;;;;;;;AC3BrC,kNAAkN,aAAa,sBAAsB,0DAA0D,eAAe,sC;;;;;;;;;;;ACA9T,iDAAiD,qBAAqB,gBAAgB,kBAAkB,GAAG,sCAAsC,oBAAoB,gBAAgB,iBAAiB,GAAG,+CAA+C,+hC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA5L;AACE;AAElC;AAS5B;IAA+C,6CAAgB;IAK3D,mCACI,QAAkB;eAElB,kBAAM,QAAQ,CAAC;IACnB,CAAC;IAED,4CAAQ,GAAR;QACI,IAAI,CAAC,SAAS,GAAG,6CAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,WAAC,IAAI,QAAC,CAAC,CAAC,UAAU,EAAb,CAAa,CAAC,CAAC;QAC3E,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC;IAC7D,CAAC;IAED,kDAAc,GAAd,UAAe,YAAoB;QAC/B,GAAG,CAAC,KAAK,CAAC,cAAc,CACpB,8BAA8B,EAC9B,YAAY,EACZ,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,QAAQ,CAAC,EAAE,SAAS;QAC9D,GAAG,CAAC,OAAO,CACd,CAAC;QAEF,QAAQ,CAAC,MAAM,EAAE,CAAC;IACtB,CAAC;IAzBQ,yBAAyB;QAPrC,+DAAS,CAAC;YACP,QAAQ,EAAE,mBAAmB;YAC7B,gIAAiD;;SAIpD,CAAC;yCAOgB,sDAAQ;OANb,yBAAyB,CA0BrC;IAAD,gCAAC;CAAA,CA1B8C,2EAAgB,GA0B9D;AA1BqC;;;;;;;;;;;;ACZtC,6CAA6C,0BAA0B,qBAAqB,uBAAuB,SAAS,2BAA2B,0BAA0B,qBAAqB,4CAA4C,0BAA0B,qBAAqB,SAAS,mQAAmQ,wBAAwB,sqDAAsqD,6BAA6B,wKAAwK,+BAA+B,mHAAmH,6BAA6B,wUAAwU,wBAAwB,2OAA2O,2BAA2B,wF;;;;;;;;;;;ACArsG,iCAAiC,sBAAsB,GAAG,oBAAoB,0BAA0B,sBAAsB,GAAG,sBAAsB,gBAAgB,GAAG,kBAAkB,gBAAgB,GAAG,gBAAgB,wBAAwB,GAAG,+CAA+C,+qC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACArP;AACN;AACuB;AACP;AACe;AAC9B;AACwC;AAOvF;IAAoC,kCAAgB;IAGlD,wBACE,QAAkB,EACX,YAA0B,EACzB,OAAkB,EAClB,eAAkC;QAJ5C,YAME,kBAAM,QAAQ,CAAC,SAChB;QALQ,kBAAY,GAAZ,YAAY,CAAc;QACzB,aAAO,GAAP,OAAO,CAAW;QAClB,qBAAe,GAAf,eAAe,CAAmB;QAN5C,gBAAU,GAAG,KAAK,CAAC;;IASnB,CAAC;IAED,sBAAI,qDAAyB;aAA7B;YACE,OAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,GAAG,CAAC,CAAC;QAC3C,CAAC;;;OAAA;IAED,sBAAI,qDAAyB;aAA7B;YACE,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE;gBAClC,OAAO,KAAK,CAAC;aACd;YAED,OAAO,IAAI,CAAC;QACd,CAAC;;;OAAA;IACD,kCAAS,GAAT;QACE,IAAI,CAAC,mBAAmB,EAAE,CAAC;IAC7B,CAAC;IACK,4CAAmB,GAA3B;QACC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,oGAAwB,CAAC,CAAC;IAC7C,CAAC;IACC,8BAAK,GAAL;QAAA,iBAGC;QAFC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,cAAM,QAAC,KAAI,CAAC,UAAU,GAAG,KAAK,CAAC,EAAzB,CAAyB,CAAC,CAAC;IAClE,CAAC;IAhCU,cAAc;QAL1B,+DAAS,CAAC;YACT,uGAAqC;YAErC,UAAU,EAAE,CAAC,kGAAsB,EAAE,CAAC;;SACvC,CAAC;yCAKY,sDAAQ;YACG,2DAAY;YAChB,2DAAS;YACD,kFAAiB;OAPjC,cAAc,CAkC1B;IAAD,qBAAC;CAAA,CAlCmC,2EAAgB,GAkCnD;AAlC0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACb4B;AACL;AACY;AACN;AACb;AACF;AACK;AACQ;AACsE;AAClF;AAI1C;IASI,sBACY,iBAAwC,EACxC,OAAe,EACf,aAA2B,EAC3B,eAA+B,EAC/B,aAA2B,EAC3B,WAAuB;QALvB,sBAAiB,GAAjB,iBAAiB,CAAuB;QACxC,YAAO,GAAP,OAAO,CAAQ;QACf,kBAAa,GAAb,aAAa,CAAc;QAC3B,oBAAe,GAAf,eAAe,CAAgB;QAC/B,kBAAa,GAAb,aAAa,CAAc;QAC3B,gBAAW,GAAX,WAAW,CAAY;QAE/B,IAAI,CAAC,KAAK,EAAE,CAAC;IACjB,CAAC;IAED,mCAAY,GAAZ,UAAa,eAA4B;QAAzC,iBASC;QARG,eAAe,GAAG,eAAe,IAAI,CAAC,cAAQ,CAAC,CAAC,CAAC;QAEjD,IAAI,CAAC,iBAAiB;aACjB,YAAY,CAAC,IAAI,CAAC,iBAAiB,CAAC;aACpC,IAAI,CAAC,+DAAQ,CAAC,cAAQ,eAAe,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;aAC5C,SAAS,CAAC,UAAC,MAA+B;YACvC,KAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;IACX,CAAC;IAEO,gDAAyB,GAAjC,UAAkC,kBAA2C;QACzE,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAE7C,IAAI,kBAAkB,CAAC,WAAW,EAAE;YAChC,yBAAyB;YACzB,IAAI,CAAC,KAAK,CACN,kBAAkB,CAAC,WAAW,EAC9B,kBAAkB,CAAC,oBAAoB,EACvC,kBAAkB,CAAC,eAAe,EAClC,IAAI,CAAC,UAAU,CAAC,CAAC;SAExB;aAAM;YACH,qBAAqB;YAErB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;YACxD,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;SAC5C;IACL,CAAC;IAEO,4BAAK,GAAb,UAAc,WAAmB,EAAE,oBAA4B,EAAE,eAAuB,EAAE,UAAoB;QAE1G,IAAM,eAAe,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,IAAI,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAE3G,IAAI,CAAC,aAAa,CAAC,QAAQ,CACvB,WAAW,EACX,eAAe,CAClB,CAAC;QAEF,IAAI,CAAC,aAAa,CAAC,cAAc,CAC7B,2DAAS,CAAC,aAAa,CAAC,qBAAqB,EAC7C,oBAAoB,EACpB,eAAe,EACf,GAAG,CAAC,OAAO,CACd,CAAC;QAEF,IAAI,UAAU,GAAG,mEAAS,CAAC,UAAU,CAAC;QACtC,IAAI,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YAClC,UAAU,GAAG,2DAAS,CAAC,UAAU,CAAC;SACrC;QAED,QAAQ,CAAC,IAAI,GAAG,UAAU,CAAC;IAC/B,CAAC;IAEO,4BAAK,GAAb;QACI,IAAI,CAAC,iBAAiB,GAAG,IAAI,yFAAiB,EAAE,CAAC;QACjD,IAAI,CAAC,iBAAiB,CAAC,cAAc,GAAG,KAAK,CAAC;QAC9C,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;IAC5B,CAAC;IA7Ee,6CAAgC,GAAG,8BAA8B,CAAC;IAFzE,YAAY;QADxB,gEAAU,EAAE;yCAWsB,6FAAqB;YAC/B,sDAAM;YACA,qEAAY;YACV,2EAAc;YAChB,oEAAY;YACd,+DAAU;OAf1B,YAAY,CAgFxB;IAAD,mBAAC;CAAA;AAhFwB;;;;;;;;;;;;ACbzB,8NAA8N,2BAA2B,mkCAAmkC,GAAG,g/BAAg/B,uBAAuB,qDAAqD,qQAAqQ,yBAAyB,uF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACArmF;AACX;AACC;AACoB;AACe;AAK5B;AACK;AAgBtD;IAAuC,qCAAgB;IAIrD,2BACE,QAAkB,EACV,eAAoC,EACpC,OAAe,EACf,aAA2B;QAJrC,YAME,kBAAM,QAAQ,CAAC,SAChB;QALS,qBAAe,GAAf,eAAe,CAAqB;QACpC,aAAO,GAAP,OAAO,CAAQ;QACf,mBAAa,GAAb,aAAa,CAAc;QAPrC,WAAK,GAAkB,IAAI,qFAAa,EAAE,CAAC;QAC3C,YAAM,GAAG,KAAK,CAAC;;IASf,CAAC;IAED,gCAAI,GAAJ;QACE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;IACpC,CAAC;IAED,gCAAI,GAAJ;QAAA,iBAwBC;QAvBC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,eAAe;aACjB,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;aACpB,IAAI,CACH,+DAAQ,CAAC;YACP,KAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACtB,CAAC,CAAC,CACH;aACA,SAAS,CAAC,UAAC,MAAsB;YAChC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;gBACpB,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAI,CAAC,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC;gBACtD,KAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAClC,OAAO;aACR;YAED,cAAc;YACd,KAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACnB,KAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,sBAAsB,GAAG,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;YAClF,KAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,QAAQ,GAAG,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;YACpE,KAAI,CAAC,aAAa,CAAC,YAAY,CAAC;gBAC9B,KAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACtB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAzCU,iBAAiB;QAd7B,+DAAS,CAAC;YACT,gHAAwC;YACxC,UAAU,EAAE,CAAC,kGAAsB,EAAE,CAAC;;SAWvC,CAAC;yCAMY,sDAAQ;YACO,2FAAmB;YAC3B,sDAAM;YACA,iEAAY;OAR1B,iBAAiB,CA0C7B;IAAD,wBAAC;CAAA,CA1CsC,2EAAgB,GA0CtD;AA1C6B;;;;;;;;;;;;AC1B9B,4HAA4H,mCAAmC,qDAAqD,aAAa,ohDAAohD,yBAAyB,qOAAqO,uBAAuB,mD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA97D;AACO;AACzC;AAEoB;AAIX;AAcnD;IAA6C,2CAAgB;IAKzD,iCACE,QAAkB,EACX,aAAmC,EAClC,UAAiD,EACZ,GAAW;QAJ1D,YAME,kBAAM,QAAQ,CAAC,SAChB;QALQ,mBAAa,GAAb,aAAa,CAAsB;QAClC,gBAAU,GAAV,UAAU,CAAuC;QACZ,SAAG,GAAH,GAAG,CAAQ;QAP1D,YAAM,GAAG,KAAK,CAAC;QACf,WAAK,GAAgB,IAAI,mFAAW,EAAE,CAAC;;IASvC,CAAC;IAED,0CAAQ,GAAR;QACE,6BAA6B;IAC/B,CAAC;IACD,sCAAI,GAAJ;QAAA,iBA0BC;QAzBC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAC,IAAI,CAAC,QAAQ,CAAC;QAClC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAC,IAAI,CAAC,GAAG,CAAC;QAC3B,IAAI,CAAC,aAAa;aACf,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;aACpB,IAAI,CACH,+DAAQ,CAAC;YAEP,KAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACtB,CAAC,CAAC,CACH;aACA,SAAS,CAAC,UAAC,IAAI;YACZ,IAAG,IAAI,CAAC,MAAM,IAAE,CAAC,EACjB;gBACE,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,oBAAoB,CAAC;gBACzC,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC;aACjB;iBAED;gBACE,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,mCAAmC,CAAC;aACvD;QACH,CAAC,CAAC,CAAC;QACL,mDAAmD;QACnD,sBAAsB;QACtB,MAAM;IACV,CAAC;IAED,uCAAK,GAAL,UAAM,MAAW;QACf,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IA/CQ,uBAAuB;QAbjC,+DAAS,CAAC;YACT,uIAAqD;;SAWxD,CAAC;QAUK,yEAAQ,EAAE,GAAE,uEAAM,CAAC,iEAAe,CAAC;yCAH1B,sDAAQ;YACI,4FAAoB;YACtB,8DAAY;OARzB,uBAAuB,CAgDjC;IAAD,8BAAC;CAAA,CAhD0C,2EAAgB,GAgD1D;AAhDiC;;;;;;;;;;;;ACtBpC,kJAAkJ,+BAA+B,iXAAiX,2CAA2C,mPAAmP,yBAAyB,+NAA+N,uBAAuB,uC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA3hC;AACH;AACP;AACoB;AACgB;AAChB;AAIb;AAYjD;IAAiD,+CAAgB;IAI/D,qCACE,QAAkB,EACV,eAAoC,EACpC,UAAqD;QAH/D,YAKE,kBAAM,QAAQ,CAAC,SAChB;QAJS,qBAAe,GAAf,eAAe,CAAqB;QACpC,gBAAU,GAAV,UAAU,CAA2C;QAN/D,YAAM,GAAG,KAAK,CAAC;QACf,iBAAW,GAAG,EAAE,CAAC;;IAQjB,CAAC;IAED,0CAAI,GAAJ;QAAA,iBAoCC;QAnCC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACrB,GAAG,CAAC,YAAY,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;YAC9C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACjB,QAAQ,CAAC,MAAM,EAAE,CAAC;YAClB,OAAO;SACR;QAED,IAAM,KAAK,GAAG,IAAI,8FAAsB,EAAE,CAAC;QAC3C,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QAErC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,eAAe;aACjB,iBAAiB,CAAC,KAAK,CAAC;aACxB,IAAI,CACH,+DAAQ,CAAC;YACP,KAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACtB,CAAC,CAAC,CACH;aACA,SAAS,CAAC,UAAC,MAA+B;YACzC,QAAQ,MAAM,CAAC,KAAK,EAAE;gBACpB,KAAK,2EAA0B,CAAC,SAAS;oBACvC,GAAG,CAAC,YAAY,CAAC,iBAAiB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;oBACpD,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;oBACjB,QAAQ,CAAC,MAAM,EAAE,CAAC;oBAClB,OAAO;gBACT,KAAK,2EAA0B,CAAC,QAAQ;oBACtC,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC,CAAC,mBAAmB,EAAE,KAAI,CAAC,WAAW,CAAC,CAAC,CAAC;oBACjE,MAAM;gBACR,KAAK,2EAA0B,CAAC,QAAQ;oBACtC,KAAI,CAAC,OAAO,CAAC,IAAI,CACf,KAAI,CAAC,CAAC,CAAC,mCAAmC,EAAE,KAAI,CAAC,WAAW,CAAC,CAC9D,CAAC;oBACF,MAAM;aACT;QACH,CAAC,CAAC,CAAC;IACP,CAAC;IAED,2CAAK,GAAL,UAAM,MAAY;QAChB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IApDU,2BAA2B;QAVvC,+DAAS,CAAC;YACT,sIAAoD;;SAQrD,CAAC;yCAMY,sDAAQ;YACO,2FAAmB;YACxB,8DAAY;OAPvB,2BAA2B,CAqDvC;IAAD,kCAAC;CAAA,CArDgD,2EAAgB,GAqDhE;AArDuC;;;;;;;;;;;;ACrBxC,wIAAwI,mEAAmE,gCAAgC,iDAAiD,QAAQ,2BAA2B,eAAe,mEAAmE,8BAA8B,yCAAyC,mCAAmC,yBAAyB,+C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAvd;AACf;AACgB;AACiB;AAM/E;IAA2C,yCAAgB;IAIzD,+BAAY,QAAkB,EAAU,OAAkB;QAA1D,YACE,kBAAM,QAAQ,CAAC,SAChB;QAFuC,aAAO,GAAP,OAAO,CAAW;QAH1D,iBAAW,GAAG,EAAE,CAAC;QACjB,UAAI,GAAG,EAAE,CAAC;;IAIV,CAAC;IAED,wCAAQ,GAAR;QACE,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;YAC1B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC;YACtD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC;SACzC;IACH,CAAC;IAED,sBAAI,wDAAqB;aAAzB;YACE,OAAO,GAAG,CAAC,YAAY,CAAC,SAAS,CAAC;QACpC,CAAC;;;OAAA;IAED,+CAAe,GAAf;QACE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,2FAA2B,EAAE;YAC7C,KAAK,EAAE,OAAO;YACd,MAAM,EAAE,OAAO;YACf,QAAQ,EAAE;gBACR,GAAG,EAAE,MAAM;aACZ;SACF,CAAC,CAAC;IACL,CAAC;IA3BU,qBAAqB;QAJjC,+DAAS,CAAC;YACT,QAAQ,EAAE,eAAe;YACzB,wHAA6C;SAC9C,CAAC;yCAKsB,sDAAQ,EAAmB,2DAAS;OAJ/C,qBAAqB,CA4BjC;IAAD,4BAAC;CAAA,CA5B0C,2EAAgB,GA4B1D;AA5BiC;;;;;;;;;;;;;ACTlC;AAAA;AAAA;AAAuF;AAGvF;IAAA;IAIA,CAAC;IAHU,oCAAS,GAAW,oGAA4B,CAAC,EAAE,CAAC;IACpD,mCAAQ,GAAW,oGAA4B,CAAC,EAAE,CAAC;IACnD,mCAAQ,GAAW,oGAA4B,CAAC,EAAE,CAAC;IAC9D,iCAAC;CAAA;AAJsC;;;;;;;;;;;;;ACHvC;AAAA;AAAA;IAAA;IAYA,CAAC;IANU,4BAAkB,GAAzB;QACI,OAAO,QAAQ,CAAC,QAAQ,CAAC,MAAM;aAC1B,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;aACpB,KAAK,CAAC,GAAG,CAAC;aACV,GAAG,CAAC,UAAU,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7F,CAAC;IAVD;;OAEG;IACa,oBAAU,GAAG,QAAQ,CAAC,IAAI,CAAC;IAQ/C,gBAAC;CAAA;AAZqB","file":"account-account-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { AccountComponent } from './account.component';\r\nimport { ResetPwdDialogComponent } from './reset/reset-password-dialog.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild([\r\n            {\r\n                path: '',\r\n                component: AccountComponent,\r\n                children: [\r\n                    { path: 'login', component: LoginComponent },\r\n                    { path: 'register', component: RegisterComponent },\r\n                ]\r\n            }\r\n        ])\r\n    ],\r\n    exports: [\r\n        RouterModule\r\n    ]\r\n})\r\nexport class AccountRoutingModule { }\r\n","module.exports = \"<div class=\\\"login-box\\\">\\r\\n    <div class=\\\"logo\\\">\\r\\n        <a href=\\\"javascript:void(0);\\\">{{'DevOps' | localize}}</a>\\r\\n    </div>\\r\\n\\r\\n    <div *ngIf=\\\"showTenantChange()\\\" class=\\\"tenant-change-box\\\">\\r\\n        <tenant-change></tenant-change>\\r\\n    </div>\\r\\n\\r\\n    <router-outlet></router-outlet>\\r\\n\\r\\n    <account-languages></account-languages>\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-xs-12 text-center\\\" style=\\\"color: #e9e9e9\\\">\\r\\n            <small>&copy; {{currentYear}} DevOps. <b>Version </b> {{versionText}}</small>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n</div>\\r\\n\"","module.exports = \".content.account-forms {\\n  margin-top: 10px;\\n}\\n.content.tenant-change-box {\\n  padding: 16px 16px 0px 16px;\\n  margin: 120px auto 0px auto;\\n  max-width: 400px;\\n}\\n.content.tenant-change-box a {\\n  cursor: pointer;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy90YW8vUHJvamVjdHMvV29ya3NwYWNlcy9DU2hhcnAvQ2xvdWRzdHJvbi9EZXZPcHMvQ2xvdWRzdHJvbi5EZXZPcHMvYW5ndWxhci9zcmMvYWNjb3VudC9hY2NvdW50LmNvbXBvbmVudC5sZXNzIiwic3JjL2FjY291bnQvYWNjb3VudC5jb21wb25lbnQubGVzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGlCQUFBO0NDQ0g7QURFRDtFQUNJLDRCQUFBO0VBQ0EsNEJBQUE7RUFDQSxpQkFBQTtDQ0FIO0FESEQ7RUFNUSxnQkFBQTtDQ0FQIiwiZmlsZSI6InNyYy9hY2NvdW50L2FjY291bnQuY29tcG9uZW50Lmxlc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY29udGVudC5hY2NvdW50LWZvcm1zIHtcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xufVxuXG4uY29udGVudC50ZW5hbnQtY2hhbmdlLWJveCB7XG4gICAgcGFkZGluZzogMTZweCAxNnB4IDBweCAxNnB4O1xuICAgIG1hcmdpbjogMTIwcHggYXV0byAwcHggYXV0bztcbiAgICBtYXgtd2lkdGg6IDQwMHB4O1xuXG4gICAgYSB7XG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICB9XG59IiwiLmNvbnRlbnQuYWNjb3VudC1mb3JtcyB7XG4gIG1hcmdpbi10b3A6IDEwcHg7XG59XG4uY29udGVudC50ZW5hbnQtY2hhbmdlLWJveCB7XG4gIHBhZGRpbmc6IDE2cHggMTZweCAwcHggMTZweDtcbiAgbWFyZ2luOiAxMjBweCBhdXRvIDBweCBhdXRvO1xuICBtYXgtd2lkdGg6IDQwMHB4O1xufVxuLmNvbnRlbnQudGVuYW50LWNoYW5nZS1ib3ggYSB7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cbiJdfQ== */\"","import { Component, ViewContainerRef, OnInit, ViewEncapsulation, Injector } from '@angular/core';\r\nimport { LoginService } from './login/login.service';\r\nimport { AppComponentBase } from '@shared/app-component-base';\r\n\r\n@Component({\r\n    templateUrl: './account.component.html',\r\n    styleUrls: [\r\n        './account.component.less'\r\n    ],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class AccountComponent extends AppComponentBase implements OnInit {\r\n\r\n    versionText: string;\r\n    currentYear: number;\r\n\r\n    private viewContainerRef: ViewContainerRef;\r\n\r\n    public constructor(\r\n        injector: Injector,\r\n        private _loginService: LoginService\r\n    ) {\r\n        super(injector);\r\n\r\n        this.currentYear = new Date().getFullYear();\r\n        this.versionText = this.appSession.application.version + ' [' + this.appSession.application.releaseDate.format('YYYYDDMM') + ']';\r\n    }\r\n\r\n    showTenantChange(): boolean {\r\n        return abp.multiTenancy.isEnabled;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        $('body').attr('class', 'login-page');\r\n    }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { JsonpModule } from '@angular/http';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nimport { ModalModule } from 'ngx-bootstrap';\r\n\r\nimport { AbpModule } from '@abp/abp.module';\r\n\r\nimport { AccountRoutingModule } from './account-routing.module';\r\n\r\nimport { ServiceProxyModule } from '@shared/service-proxies/service-proxy.module';\r\n\r\nimport { SharedModule } from '@shared/shared.module';\r\n\r\nimport { AccountComponent } from './account.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { AccountLanguagesComponent } from './layout/account-languages.component';\r\n\r\nimport { LoginService } from './login/login.service';\r\n\r\n// tenants\r\nimport { TenantChangeComponent } from './tenant/tenant-change.component';\r\nimport { TenantChangeDialogComponent } from './tenant/tenant-change-dialog.component';\r\n\r\nimport { ForgetPwdDialogComponent } from 'account/forget/forget-user-dialog.component';\r\n\r\n//After forget password    reset password\r\nimport {ResetPwdDialogComponent} from 'account/reset/reset-password-dialog.component';\r\nimport { from } from 'rxjs';\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        HttpClientModule,\r\n        JsonpModule,\r\n        AbpModule,\r\n        SharedModule,\r\n        ServiceProxyModule,\r\n        AccountRoutingModule,\r\n        ModalModule.forRoot()\r\n    ],\r\n    declarations: [\r\n        AccountComponent,\r\n        LoginComponent,\r\n        RegisterComponent,\r\n        AccountLanguagesComponent,\r\n        // tenant\r\n        TenantChangeComponent,\r\n        TenantChangeDialogComponent,\r\n        ForgetPwdDialogComponent,\r\n        \r\n        //reset password\r\n        ResetPwdDialogComponent\r\n    ],\r\n    providers: [\r\n        LoginService\r\n    ],\r\n    entryComponents: [\r\n        // tenant\r\n        TenantChangeDialogComponent,\r\n        ForgetPwdDialogComponent,\r\n\r\n        //reset password\r\n        ResetPwdDialogComponent\r\n    ]\r\n})\r\nexport class AccountModule {\r\n\r\n}\r\n","module.exports = \"<form autocomplete=\\\"off\\\" #forgetPwdModal=\\\"ngForm\\\" (ngSubmit)=\\\"save()\\\">\\r\\n        <h1 mat-dialog-title>{{ \\\"ForgetPassword\\\" | localize }}</h1>\\r\\n        <mat-dialog-content style=\\\"width:800px;height:300px;\\\">\\r\\n          <mat-tab-group>\\r\\n            <mat-tab [label]=\\\"'ForgetPassword' | localize\\\">\\r\\n              <br />\\r\\n              <div class=\\\"row-fluid\\\">\\r\\n                <div class=\\\"col-md-6\\\">\\r\\n                  <mat-form-field>\\r\\n                    <input\\r\\n                      matInput\\r\\n                      name=\\\"UserName\\\"\\r\\n                      [placeholder]=\\\"'UserName' | localize\\\"\\r\\n                      [(ngModel)]=\\\"userName\\\"\\r\\n                      required\\r\\n                      maxlength=\\\"32\\\"\\r\\n                    />\\r\\n                  </mat-form-field>\\r\\n                  <mat-form-field>\\r\\n                    <input\\r\\n                      matInput\\r\\n                      name=\\\"EmailAddress\\\"\\r\\n                      [placeholder]=\\\"'EmailAddress' | localize\\\"\\r\\n                      [(ngModel)]=\\\"emailAddress\\\"\\r\\n                      type=\\\"email\\\"\\r\\n                      required\\r\\n                      maxlength=\\\"256\\\"\\r\\n                      pattern=\\\"^\\\\w+([\\\\.-]?\\\\w+)*@\\\\w+([\\\\.-]?\\\\w+)*(\\\\.\\\\w{1,})+$\\\"\\r\\n                    />\\r\\n                  </mat-form-field>\\r\\n                  <div class=\\\"checkbox-wrapper\\\">\\r\\n                        <mat-checkbox name=\\\"IsActive\\\" [(ngModel)]=\\\"isTenant\\\">\\r\\n                          {{ \\\"IsTenant\\\" | localize }}\\r\\n                        </mat-checkbox>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </mat-tab>\\r\\n          </mat-tab-group>\\r\\n        </mat-dialog-content>\\r\\n        <div mat-dialog-actions align=\\\"end\\\">\\r\\n          <button mat-button type=\\\"button\\\" [disabled]=\\\"saving\\\" (click)=\\\"close(false)\\\">\\r\\n            {{ \\\"Cancel\\\" | localize }}\\r\\n          </button>\\r\\n          <button\\r\\n            mat-flat-button\\r\\n            type=\\\"submit\\\"\\r\\n            flex=\\\"15\\\"\\r\\n            color=\\\"primary\\\"\\r\\n            [disabled]=\\\"!forgetPwdModal.form.valid || saving\\\"\\r\\n          >\\r\\n            {{ \\\"Save\\\" | localize }}\\r\\n          </button>\\r\\n        </div>\\r\\n      </form>\\r\\n\"","import { Component, Injector, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MatCheckboxChange } from '@angular/material';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { MatDialog } from '@angular/material';\r\nimport * as _ from 'lodash';\r\nimport { AppComponentBase } from '@shared/app-component-base';\r\nimport {\r\n    ForgetPwdServiceProxy,\r\n    ForgetDto,\r\n  } from '@shared/service-proxies/service-proxies';\r\nimport { ResetPwdDialogComponent } from 'account/reset/reset-password-dialog.component';\r\nimport { idLocale } from 'ngx-bootstrap';\r\n\r\n\r\n@Component({\r\n    templateUrl: './forget-user-dialog.component.html',\r\n    styles: [\r\n      `\r\n        mat-form-field {\r\n          width: 100%;\r\n        }\r\n        mat-checkbox {\r\n          padding-bottom: 5px;\r\n        }\r\n      `\r\n    ]\r\n})\r\nexport class ForgetPwdDialogComponent extends AppComponentBase\r\n    implements OnInit {\r\n        saving = false;\r\n        forget: ForgetDto = new ForgetDto(); \r\n        userName: string;\r\n        emailAddress:string;\r\n        isTenant:boolean;       \r\n        constructor(\r\n          injector: Injector,\r\n          public _forgetService: ForgetPwdServiceProxy,\r\n          private _dialog: MatDialog,\r\n          private _dialogRef: MatDialogRef<ForgetPwdDialogComponent>,\r\n          \r\n        ) {\r\n          super(injector);\r\n        }\r\n      \r\n        ngOnInit(): void {\r\n          this.forget.isTenant=false;     \r\n        }           \r\n        save(): void {\r\n          this.saving = true;      \r\n          this.forget.isTenant = this.isTenant;      \r\n          this._forgetService\r\n            .forgetPwd(this.userName,this.emailAddress,this.isTenant)\r\n            .pipe(\r\n              finalize(() => {\r\n                  \r\n                this.saving = false;\r\n              })\r\n            )\r\n            .subscribe((data) => {\r\n              \r\n                if(data.count==1)\r\n                {\r\n                  abp.message.success(\"VerifySuccessfully\")\r\n                  this.close(true);\r\n                  this._dialog.open(ResetPwdDialogComponent,{data:data.id});\r\n                }\r\n                else\r\n                {\r\n                  abp.message.error(\"Validation Failed, Please Reenter\")\r\n                }\r\n            });\r\n            //   this.notify.info(this.l('SavedSuccessfully'));\r\n            //   this.close(true);\r\n            // });\r\n        }\r\n      \r\n        close(result: any): void {\r\n          this._dialogRef.close(result);\r\n        }\r\n      }\r\n  ","module.exports = \"<ul class=\\\"account-language-switch-list text-center\\\">\\r\\n    <li *ngFor=\\\"let language of languages\\\">\\r\\n        <a *ngIf=\\\"language.name != currentLanguage.name\\\" href=\\\"javascript:void();\\\" title=\\\"{{language.displayName}}\\\" (click)=\\\"changeLanguage(language.name)\\\"><i class=\\\"{{language.icon}}\\\"></i></a>\\r\\n    </li>\\r\\n</ul>\\r\\n\"","module.exports = \".account-language-switch-list {\\n  list-style: none;\\n  margin: 0px;\\n  padding: 10px;\\n}\\n.account-language-switch-list > li {\\n  display: inline;\\n  margin: 0px;\\n  padding: 0px;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy90YW8vUHJvamVjdHMvV29ya3NwYWNlcy9DU2hhcnAvQ2xvdWRzdHJvbi9EZXZPcHMvQ2xvdWRzdHJvbi5EZXZPcHMvYW5ndWxhci9zcmMvYWNjb3VudC9sYXlvdXQvYWNjb3VudC1sYW5ndWFnZXMuY29tcG9uZW50Lmxlc3MiLCJzcmMvYWNjb3VudC9sYXlvdXQvYWNjb3VudC1sYW5ndWFnZXMuY29tcG9uZW50Lmxlc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxpQkFBQTtFQUNBLFlBQUE7RUFDQSxjQUFBO0NDQ0g7QURKRDtFQU1RLGdCQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7Q0NDUCIsImZpbGUiOiJzcmMvYWNjb3VudC9sYXlvdXQvYWNjb3VudC1sYW5ndWFnZXMuY29tcG9uZW50Lmxlc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuYWNjb3VudC1sYW5ndWFnZS1zd2l0Y2gtbGlzdCB7XG4gICAgbGlzdC1zdHlsZTogbm9uZTtcbiAgICBtYXJnaW46IDBweDtcbiAgICBwYWRkaW5nOiAxMHB4O1xuXG4gICAgPiBsaSB7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZTtcbiAgICAgICAgbWFyZ2luOiAwcHg7XG4gICAgICAgIHBhZGRpbmc6IDBweDtcbiAgICB9XG59XG4iLCIuYWNjb3VudC1sYW5ndWFnZS1zd2l0Y2gtbGlzdCB7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIG1hcmdpbjogMHB4O1xuICBwYWRkaW5nOiAxMHB4O1xufVxuLmFjY291bnQtbGFuZ3VhZ2Utc3dpdGNoLWxpc3QgPiBsaSB7XG4gIGRpc3BsYXk6IGlubGluZTtcbiAgbWFyZ2luOiAwcHg7XG4gIHBhZGRpbmc6IDBweDtcbn1cbiJdfQ== */\"","import { Component, OnInit, Injector } from '@angular/core';\r\nimport { AppComponentBase } from '@shared/app-component-base';\r\n\r\nimport * as _ from 'lodash';\r\n\r\n@Component({\r\n    selector: 'account-languages',\r\n    templateUrl: './account-languages.component.html',\r\n    styleUrls: [\r\n        './account-languages.component.less'\r\n    ]\r\n})\r\nexport class AccountLanguagesComponent extends AppComponentBase implements OnInit {\r\n\r\n    languages: abp.localization.ILanguageInfo[];\r\n    currentLanguage: abp.localization.ILanguageInfo;\r\n\r\n    constructor(\r\n        injector: Injector\r\n    ) {\r\n        super(injector);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.languages = _.filter(this.localization.languages, l => !l.isDisabled);\r\n        this.currentLanguage = this.localization.currentLanguage;\r\n    }\r\n\r\n    changeLanguage(languageName: string): void {\r\n        abp.utils.setCookieValue(\r\n            'Abp.Localization.CultureName',\r\n            languageName,\r\n            new Date(new Date().getTime() + 5 * 365 * 86400000), // 5 year\r\n            abp.appPath\r\n        );\r\n\r\n        location.reload();\r\n    }\r\n}\r\n","module.exports = \"<style>\\r\\n    .card .body{\\r\\n      font-size: 14px;\\r\\n      color:#555;\\r\\n      padding:20px;\\r\\n    }\\r\\n    .input-group-addon{\\r\\n      font-size: 18px;\\r\\n      color:#555;\\r\\n      background-color: #fff !important;\\r\\n      padding:0px 0px;\\r\\n      border:0px;\\r\\n    }\\r\\n</style>\\r\\n\\r\\n<div class=\\\"card\\\" [@routerTransition]>\\r\\n  <div class=\\\"body\\\">\\r\\n    <form\\r\\n      novalidate\\r\\n      autocomplete=\\\"off\\\"\\r\\n      #loginForm=\\\"ngForm\\\"\\r\\n      (ngSubmit)=\\\"login()\\\"\\r\\n    >\\r\\n      <h4 class=\\\"text-center\\\">{{ \\\"LogIn\\\" | localize }}</h4>\\r\\n      <div class=\\\"row clearfix\\\">\\r\\n        <div class=\\\"col-xs-12\\\">\\r\\n          <div class=\\\"input-group\\\">\\r\\n            <span class=\\\"input-group-addon\\\">\\r\\n              <i class=\\\"material-icons\\\">person</i>\\r\\n            </span>\\r\\n            <div>\\r\\n              <mat-form-field>\\r\\n                <input\\r\\n                  matInput\\r\\n                  name=\\\"userNameOrEmailAddress\\\"\\r\\n                  [(ngModel)]=\\\"\\r\\n                    loginService.authenticateModel.userNameOrEmailAddress\\r\\n                  \\\"\\r\\n                  [placeholder]=\\\"'UserNameOrEmail' | localize\\\"\\r\\n                  autocomplete=\\\"off\\\"\\r\\n                  required\\r\\n                  maxlength=\\\"255\\\"\\r\\n                />\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"input-group\\\">\\r\\n            <span class=\\\"input-group-addon\\\">\\r\\n              <i class=\\\"material-icons\\\">lock</i>\\r\\n            </span>\\r\\n            <div>\\r\\n              <mat-form-field>\\r\\n                <input\\r\\n                  matInput\\r\\n                  type=\\\"password\\\"\\r\\n                  name=\\\"password\\\"\\r\\n                  [(ngModel)]=\\\"loginService.authenticateModel.password\\\"\\r\\n                  [placeholder]=\\\"'Password' | localize\\\"\\r\\n                  required\\r\\n                  maxlength=\\\"32\\\"\\r\\n                />\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-xs-8 p-t-5\\\">\\r\\n          <mat-checkbox name=\\\"rememberMe\\\" [(ngModel)]=\\\"loginService.rememberMe\\\">\\r\\n            {{ \\\"RememberMe\\\" | localize }}\\r\\n          </mat-checkbox>\\r\\n        </div>\\r\\n        <div class=\\\"col-xs-8 p-t-5\\\">\\r\\n          <a name=\\\"\\\" (click)=\\\"forgetPwd()\\\" style=\\\"cursor: pointer\\\">{{\\\"ForgetPassword\\\" | localize}}</a>\\r\\n          <!-- <mat-checkbox name=\\\"rememberMe\\\" [(ngModel)]=\\\"loginService.rememberMe\\\">\\r\\n            {{ \\\"RememberMe\\\" | localize }}\\r\\n          </mat-checkbox> -->\\r\\n        </div>\\r\\n        <div class=\\\"col-xs-4\\\">\\r\\n          <button\\r\\n            mat-flat-button\\r\\n            type=\\\"submit\\\"\\r\\n            flex=\\\"15\\\"\\r\\n            color=\\\"accent\\\"\\r\\n            [disabled]=\\\"!loginForm.form.valid || submitting\\\"\\r\\n          >\\r\\n            {{ \\\"LogIn\\\" | localize }}\\r\\n          </button>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <!-- <div class=\\\"row m-t-15 m-b--20\\\" *ngIf=\\\"isSelfRegistrationAllowed\\\">\\r\\n        <div class=\\\"col-xs-12\\\">\\r\\n          <a [routerLink]=\\\"['../register']\\\">{{ \\\"Register\\\" | localize }}</a>\\r\\n        </div>\\r\\n      </div> -->\\r\\n\\r\\n    </form>\\r\\n  </div>\\r\\n</div>\\r\\n\"","module.exports = \".social-icons {\\n  padding-left: 0px;\\n}\\n.social-icons li {\\n  display: inline-block;\\n  margin-right: 5px;\\n}\\n.social-icons li a {\\n  width: 40px;\\n}\\nmat-form-field {\\n  width: 100%;\\n}\\nmat-checkbox {\\n  padding-bottom: 5px;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy90YW8vUHJvamVjdHMvV29ya3NwYWNlcy9DU2hhcnAvQ2xvdWRzdHJvbi9EZXZPcHMvQ2xvdWRzdHJvbi5EZXZPcHMvYW5ndWxhci9zcmMvYWNjb3VudC9sb2dpbi9sb2dpbi5jb21wb25lbnQubGVzcyIsInNyYy9hY2NvdW50L2xvZ2luL2xvZ2luLmNvbXBvbmVudC5sZXNzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksa0JBQUE7Q0NDSDtBREZEO0VBSVEsc0JBQUE7RUFDQSxrQkFBQTtDQ0NQO0FETkQ7RUFRWSxZQUFBO0NDQ1g7QURJRDtFQUNFLFlBQUE7Q0NGRDtBRElEO0VBQ0Usb0JBQUE7Q0NGRCIsImZpbGUiOiJzcmMvYWNjb3VudC9sb2dpbi9sb2dpbi5jb21wb25lbnQubGVzcyIsInNvdXJjZXNDb250ZW50IjpbIi5zb2NpYWwtaWNvbnMge1xuICAgIHBhZGRpbmctbGVmdDogMHB4O1xuXG4gICAgbGkge1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgIG1hcmdpbi1yaWdodDogNXB4O1xuXG4gICAgICAgIGEge1xuICAgICAgICAgICAgd2lkdGg6IDQwcHg7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbm1hdC1mb3JtLWZpZWxkIHtcbiAgd2lkdGg6IDEwMCU7XG59XG5tYXQtY2hlY2tib3gge1xuICBwYWRkaW5nLWJvdHRvbTogNXB4O1xufSIsIi5zb2NpYWwtaWNvbnMge1xuICBwYWRkaW5nLWxlZnQ6IDBweDtcbn1cbi5zb2NpYWwtaWNvbnMgbGkge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIG1hcmdpbi1yaWdodDogNXB4O1xufVxuLnNvY2lhbC1pY29ucyBsaSBhIHtcbiAgd2lkdGg6IDQwcHg7XG59XG5tYXQtZm9ybS1maWVsZCB7XG4gIHdpZHRoOiAxMDAlO1xufVxubWF0LWNoZWNrYm94IHtcbiAgcGFkZGluZy1ib3R0b206IDVweDtcbn1cbiJdfQ== */\"","import { Component, Injector } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { AbpSessionService } from '@abp/session/abp-session.service';\r\nimport { AppComponentBase } from '@shared/app-component-base';\r\nimport { accountModuleAnimation } from '@shared/animations/routerTransition';\r\nimport { LoginService } from './login.service';\r\nimport { ForgetPwdDialogComponent } from 'account/forget/forget-user-dialog.component';\r\n\r\n@Component({\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.less'],\r\n  animations: [accountModuleAnimation()]\r\n})\r\nexport class LoginComponent extends AppComponentBase {\r\n  submitting = false;\r\n\r\n  constructor(\r\n    injector: Injector,\r\n    public loginService: LoginService,\r\n    private _dialog: MatDialog,\r\n    private _sessionService: AbpSessionService\r\n  ) {\r\n    super(injector);\r\n  }\r\n   \r\n  get multiTenancySideIsTeanant(): boolean {\r\n    return this._sessionService.tenantId > 0;\r\n  }\r\n\r\n  get isSelfRegistrationAllowed(): boolean {\r\n    if (!this._sessionService.tenantId) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n  forgetPwd(): void {\r\n    this.showForgetPwdDialog();\r\n  }\r\nprivate showForgetPwdDialog(): void {\r\n this._dialog.open(ForgetPwdDialogComponent);\r\n}\r\n  login(): void {\r\n    this.submitting = true;\r\n    this.loginService.authenticate(() => (this.submitting = false));\r\n  }\r\n  \r\n}\r\n","import { TokenService } from '@abp/auth/token.service';\r\nimport { LogService } from '@abp/log/log.service';\r\nimport { MessageService } from '@abp/message/message.service';\r\nimport { UtilsService } from '@abp/utils/utils.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { AppConsts } from '@shared/AppConsts';\r\nimport { UrlHelper } from '@shared/helpers/UrlHelper';\r\nimport { AuthenticateModel, AuthenticateResultModel, TokenAuthServiceProxy } from '@shared/service-proxies/service-proxies';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\n\r\n@Injectable()\r\nexport class LoginService {\r\n\r\n    static readonly twoFactorRememberClientTokenName = 'TwoFactorRememberClientToken';\r\n\r\n    authenticateModel: AuthenticateModel;\r\n    authenticateResult: AuthenticateResultModel;\r\n\r\n    rememberMe: boolean;\r\n\r\n    constructor(\r\n        private _tokenAuthService: TokenAuthServiceProxy,\r\n        private _router: Router,\r\n        private _utilsService: UtilsService,\r\n        private _messageService: MessageService,\r\n        private _tokenService: TokenService,\r\n        private _logService: LogService\r\n    ) {\r\n        this.clear();\r\n    }\r\n\r\n    authenticate(finallyCallback?: () => void): void {\r\n        finallyCallback = finallyCallback || (() => { });\r\n\r\n        this._tokenAuthService\r\n            .authenticate(this.authenticateModel)\r\n            .pipe(finalize(() => { finallyCallback(); }))\r\n            .subscribe((result: AuthenticateResultModel) => {\r\n                this.processAuthenticateResult(result);\r\n            });\r\n    }\r\n\r\n    private processAuthenticateResult(authenticateResult: AuthenticateResultModel) {\r\n        this.authenticateResult = authenticateResult;\r\n\r\n        if (authenticateResult.accessToken) {\r\n            // Successfully logged in\r\n            this.login(\r\n                authenticateResult.accessToken,\r\n                authenticateResult.encryptedAccessToken,\r\n                authenticateResult.expireInSeconds,\r\n                this.rememberMe);\r\n\r\n        } else {\r\n            // Unexpected result!\r\n\r\n            this._logService.warn('Unexpected authenticateResult!');\r\n            this._router.navigate(['account/login']);\r\n        }\r\n    }\r\n\r\n    private login(accessToken: string, encryptedAccessToken: string, expireInSeconds: number, rememberMe?: boolean): void {\r\n\r\n        const tokenExpireDate = rememberMe ? (new Date(new Date().getTime() + 1000 * expireInSeconds)) : undefined;\r\n\r\n        this._tokenService.setToken(\r\n            accessToken,\r\n            tokenExpireDate\r\n        );\r\n\r\n        this._utilsService.setCookieValue(\r\n            AppConsts.authorization.encrptedAuthTokenName,\r\n            encryptedAccessToken,\r\n            tokenExpireDate,\r\n            abp.appPath\r\n        );\r\n\r\n        let initialUrl = UrlHelper.initialUrl;\r\n        if (initialUrl.indexOf('/login') > 0) {\r\n            initialUrl = AppConsts.appBaseUrl;\r\n        }\r\n\r\n        location.href = initialUrl;\r\n    }\r\n\r\n    private clear(): void {\r\n        this.authenticateModel = new AuthenticateModel();\r\n        this.authenticateModel.rememberClient = false;\r\n        this.authenticateResult = null;\r\n        this.rememberMe = false;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"card\\\" [@routerTransition]>\\r\\n  <div class=\\\"body\\\">\\r\\n    <form novalidate \\r\\n          #registerForm=\\\"ngForm\\\" \\r\\n          (ngSubmit)=\\\"save()\\\">\\r\\n      <h4 class=\\\"text-center\\\">{{ \\\"Register\\\" | localize }}</h4>\\r\\n      <div class=\\\"form-group form-float\\\">\\r\\n          <mat-form-field>\\r\\n              <input matInput\\r\\n                 name=\\\"Name\\\"\\r\\n                 [(ngModel)]=\\\"model.name\\\"\\r\\n                 [placeholder]=\\\"'Name' | localize\\\"\\r\\n                 required\\r\\n                 maxlength=\\\"32\\\" />\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n              <input matInput\\r\\n                  name=\\\"Surname\\\"\\r\\n                  [(ngModel)]=\\\"model.surname\\\"\\r\\n                  [placeholder]=\\\"'Surname' | localize\\\"\\r\\n                  required\\r\\n                  maxlength=\\\"32\\\"/>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n              <input matInput\\r\\n                   type=\\\"email\\\"\\r\\n                   name=\\\"EmailAddress\\\"\\r\\n                   [(ngModel)]=\\\"model.emailAddress\\\"\\r\\n                   [placeholder]=\\\"'EmailAddress' | localize\\\"         \\r\\n                   required\\r\\n                   maxlength=\\\"255\\\"\\r\\n                   pattern=\\\"^\\\\w+([\\\\.-]?\\\\w+)*@\\\\w+([\\\\.-]?\\\\w+)*(\\\\.\\\\w{1,})+$\\\"/>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n              <input matInput\\r\\n                   name=\\\"UserName\\\"\\r\\n                   [(ngModel)]=\\\"model.userName\\\"\\r\\n                   [placeholder]=\\\"'UserName' | localize\\\"         \\r\\n                   required\\r\\n                   maxlength=\\\"32\\\"/>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n             <input matInput\\r\\n                    name=\\\"Password\\\"\\r\\n                    [(ngModel)]=\\\"model.password\\\"\\r\\n                    [placeholder]=\\\"'Password' | localize\\\"\\r\\n                    type=\\\"password\\\"         \\r\\n                    required\\r\\n                    maxlength=\\\"32\\\"/>\\r\\n          </mat-form-field>\\r\\n      </div>\\r\\n      <div class=\\\"form-actions text-center\\\">\\r\\n            <button mat-button \\r\\n                    type=\\\"button\\\"\\r\\n                    [disabled]=\\\"saving\\\"\\r\\n                    [routerLink]=\\\"['../login']\\\">\\r\\n                    {{ \\\"Back\\\" | localize }}\\r\\n            </button>\\r\\n            <span>&nbsp;</span>\\r\\n            <button mat-flat-button\\r\\n                    type=\\\"submit\\\"\\r\\n                    flex=\\\"15\\\"\\r\\n                    color=\\\"primary\\\"\\r\\n                    [disabled]=\\\"!registerForm.form.valid || saving\\\">\\r\\n                    {{ \\\"Submit\\\" | localize }}\\r\\n            </button>    \\r\\n      </div>\\r\\n    </form>\\r\\n  </div>\\r\\n</div>\\r\\n\"","import { Component, Injector } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { AppComponentBase } from '@shared/app-component-base';\r\nimport { accountModuleAnimation } from '@shared/animations/routerTransition';\r\nimport {\r\n  AccountServiceProxy,\r\n  RegisterInput,\r\n  RegisterOutput\r\n} from '@shared/service-proxies/service-proxies';\r\nimport { LoginService } from '../login/login.service';\r\n\r\n@Component({\r\n  templateUrl: './register.component.html',\r\n  animations: [accountModuleAnimation()],\r\n  styles: [\r\n    `\r\n      mat-form-field {\r\n        width: 100%;\r\n      }\r\n      mat-checkbox {\r\n        padding-bottom: 5px;\r\n      }\r\n    `\r\n  ]\r\n})\r\nexport class RegisterComponent extends AppComponentBase {\r\n  model: RegisterInput = new RegisterInput();\r\n  saving = false;\r\n\r\n  constructor(\r\n    injector: Injector,\r\n    private _accountService: AccountServiceProxy,\r\n    private _router: Router,\r\n    private _loginService: LoginService\r\n  ) {\r\n    super(injector);\r\n  }\r\n\r\n  back(): void {\r\n    this._router.navigate(['/login']);\r\n  }\r\n\r\n  save(): void {\r\n    this.saving = true;\r\n    this._accountService\r\n      .register(this.model)\r\n      .pipe(\r\n        finalize(() => {\r\n          this.saving = false;\r\n        })\r\n      )\r\n      .subscribe((result: RegisterOutput) => {\r\n        if (!result.canLogin) {\r\n          this.notify.success(this.l('SuccessfullyRegistered'));\r\n          this._router.navigate(['/login']);\r\n          return;\r\n        }\r\n\r\n        // Autheticate\r\n        this.saving = true;\r\n        this._loginService.authenticateModel.userNameOrEmailAddress = this.model.userName;\r\n        this._loginService.authenticateModel.password = this.model.password;\r\n        this._loginService.authenticate(() => {\r\n          this.saving = false;\r\n        });\r\n      });\r\n  }\r\n}\r\n","module.exports = \"<form autocomplete=\\\"off\\\" #resetPwdModal=\\\"ngForm\\\" (ngSubmit)=\\\"save()\\\">\\r\\n    <h1 mat-dialog-title>{{ \\\"ResetNewPassword\\\" | localize }}</h1>\\r\\n    <mat-dialog-content style=\\\"width:800px;height:300px;\\\">\\r\\n      <mat-tab-group>\\r\\n        <mat-tab [label]=\\\"'ResetPassword' | localize\\\">\\r\\n          <br />\\r\\n          <div class=\\\"row-fluid\\\">\\r\\n            <div class=\\\"col-md-6\\\">\\r\\n            <mat-form-field>\\r\\n                    <input\\r\\n                      matInput\\r\\n                      [placeholder]=\\\"'Password' | localize\\\"\\r\\n                      [(ngModel)]=\\\"password\\\"\\r\\n                      type=\\\"password\\\"\\r\\n                      name=\\\"password\\\"\\r\\n                      id=\\\"password\\\"\\r\\n                      validateEqual=\\\"confirmPassword\\\"\\r\\n                      reverse=\\\"true\\\"\\r\\n                      required\\r\\n                      maxlength=\\\"32\\\"\\r\\n                    />\\r\\n            </mat-form-field>\\r\\n            <mat-form-field>\\r\\n                <input\\r\\n                  matInput\\r\\n                  [placeholder]=\\\"'ConfirmPassword' | localize\\\"\\r\\n                  ngModel\\r\\n                  type=\\\"password\\\"\\r\\n                  name=\\\"confirmPassword\\\"\\r\\n                  id=\\\"confirmPassword\\\"\\r\\n                  validateEqual=\\\"password\\\"\\r\\n                  reverse=\\\"false\\\"\\r\\n                  required\\r\\n                  maxlength=\\\"32\\\"\\r\\n                />\\r\\n            </mat-form-field>\\r\\n            </div>\\r\\n          </div>\\r\\n        </mat-tab>\\r\\n      </mat-tab-group>\\r\\n    </mat-dialog-content>\\r\\n    <div mat-dialog-actions align=\\\"end\\\">\\r\\n      <button mat-button type=\\\"button\\\" [disabled]=\\\"saving\\\" (click)=\\\"close(false)\\\">\\r\\n        {{ \\\"Cancel\\\" | localize }}\\r\\n      </button>\\r\\n      <button\\r\\n        mat-flat-button\\r\\n        type=\\\"submit\\\"\\r\\n        flex=\\\"15\\\"\\r\\n        color=\\\"primary\\\"\\r\\n        [disabled]=\\\"!resetPwdModal.form.valid || saving\\\"\\r\\n      >\\r\\n        {{ \\\"Save\\\" | localize }}\\r\\n      </button>\\r\\n    </div>\\r\\n  </form>\\r\\n\"","import { Component, Injector,Optional, OnInit,Inject } from '@angular/core';\r\nimport { MatDialogRef, MatCheckboxChange,MAT_DIALOG_DATA} from '@angular/material';\r\nimport { finalize } from 'rxjs/operators';\r\nimport * as _ from 'lodash';\r\nimport { AppComponentBase } from '@shared/app-component-base';\r\nimport {\r\n    ResetPwdServiceProxy,\r\n    ResetPwdDto,\r\n  } from '@shared/service-proxies/service-proxies';\r\n  @Component({\r\n    templateUrl: './reset-password-dialog.component.html',\r\n    styles: [\r\n      `\r\n        mat-form-field {\r\n          width: 100%;\r\n        }\r\n        mat-checkbox {\r\n          padding-bottom: 5px;\r\n        }\r\n      `\r\n    ]\r\n})\r\nexport class ResetPwdDialogComponent extends AppComponentBase\r\nimplements OnInit {\r\n    saving = false;\r\n    reset: ResetPwdDto = new ResetPwdDto(); \r\n    password: string;     \r\n    constructor(\r\n      injector: Injector,\r\n      public _resetService: ResetPwdServiceProxy,\r\n      private _dialogRef: MatDialogRef<ResetPwdDialogComponent>,\r\n      @Optional() @Inject(MAT_DIALOG_DATA) private _id: number\r\n    ) {\r\n      super(injector);\r\n    }\r\n    \r\n    ngOnInit(): void {\r\n      // this..isTenant=false;     \r\n    }           \r\n    save(): void {\r\n      this.saving = true;      \r\n      this.reset.password=this.password;\r\n      this.reset.userId=this._id;  \r\n      this._resetService\r\n        .resetPwd(this.reset)\r\n        .pipe(\r\n          finalize(() => {\r\n              \r\n            this.saving = false;\r\n          })\r\n        )\r\n        .subscribe((data) => {\r\n            if(data.result==1)\r\n            {\r\n              abp.message.success(\"VerifySuccessfully\")\r\n              this.close(true)\r\n            }\r\n            else\r\n            {\r\n              abp.message.error(\"Validation Failed, Please Reenter\")\r\n            }\r\n          });\r\n        //   this.notify.info(this.l('SavedSuccessfully'));\r\n        //   this.close(true);\r\n        // });\r\n    }\r\n  \r\n    close(result: any): void {\r\n      this._dialogRef.close(result);\r\n    }\r\n  }","module.exports = \"<form autocomplete=\\\"off\\\"\\r\\n      #changeTenantForm=\\\"ngForm\\\"\\r\\n      (ngSubmit)=\\\"save()\\\">\\r\\n    <h1 mat-dialog-title >{{ \\\"ChangeTenant\\\" | localize }}</h1>\\r\\n    <mat-dialog-content>\\r\\n        <mat-form-field>\\r\\n            <input \\r\\n                matInput\\r\\n                name=\\\"tenancyName\\\"\\r\\n                [placeholder]=\\\"'TenancyName' | localize\\\"\\r\\n                [(ngModel)]=\\\"tenancyName\\\"\\r\\n                maxlength=\\\"64\\\"/>\\r\\n        </mat-form-field>\\r\\n        <span class=\\\"help-block\\\">{{ \\\"LeaveEmptyToSwitchToHost\\\" | localize }}</span>\\r\\n    </mat-dialog-content>\\r\\n    <div mat-dialog-actions \\r\\n         align=\\\"end\\\">\\r\\n        <button mat-button\\r\\n                type=\\\"button\\\"\\r\\n                [disabled]=\\\"saving\\\"\\r\\n                (click)=\\\"close()\\\">{{ \\\"Cancel\\\" | localize }}</button>\\r\\n        <button mat-flat-button\\r\\n                type=\\\"submit\\\"\\r\\n                flex=\\\"15\\\"\\r\\n                color=\\\"primary\\\"\\r\\n                [disabled]=\\\"!changeTenantForm.form.valid || saving\\\">{{ \\\"Save\\\" | localize }}</button>\\r\\n    </div>\\r\\n</form>\\r\\n\"","import { Component, Injector } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { AppComponentBase } from '@shared/app-component-base';\r\nimport { AccountServiceProxy } from '@shared/service-proxies/service-proxies';\r\nimport { AppTenantAvailabilityState } from '@shared/AppEnums';\r\nimport {\r\n  IsTenantAvailableInput,\r\n  IsTenantAvailableOutput\r\n} from '@shared/service-proxies/service-proxies';\r\n\r\n@Component({\r\n  templateUrl: './tenant-change-dialog.component.html',\r\n  styles: [\r\n    `\r\n      mat-form-field {\r\n        width: 100%;\r\n      }\r\n    `\r\n  ]\r\n})\r\nexport class TenantChangeDialogComponent extends AppComponentBase {\r\n  saving = false;\r\n  tenancyName = '';\r\n\r\n  constructor(\r\n    injector: Injector,\r\n    private _accountService: AccountServiceProxy,\r\n    private _dialogRef: MatDialogRef<TenantChangeDialogComponent>\r\n  ) {\r\n    super(injector);\r\n  }\r\n\r\n  save(): void {\r\n    if (!this.tenancyName) {\r\n      abp.multiTenancy.setTenantIdCookie(undefined);\r\n      this.close(true);\r\n      location.reload();\r\n      return;\r\n    }\r\n\r\n    const input = new IsTenantAvailableInput();\r\n    input.tenancyName = this.tenancyName;\r\n\r\n    this.saving = true;\r\n    this._accountService\r\n      .isTenantAvailable(input)\r\n      .pipe(\r\n        finalize(() => {\r\n          this.saving = false;\r\n        })\r\n      )\r\n      .subscribe((result: IsTenantAvailableOutput) => {\r\n        switch (result.state) {\r\n          case AppTenantAvailabilityState.Available:\r\n            abp.multiTenancy.setTenantIdCookie(result.tenantId);\r\n            this.close(true);\r\n            location.reload();\r\n            return;\r\n          case AppTenantAvailabilityState.InActive:\r\n            this.message.warn(this.l('TenantIsNotActive', this.tenancyName));\r\n            break;\r\n          case AppTenantAvailabilityState.NotFound:\r\n            this.message.warn(\r\n              this.l('ThereIsNoTenantDefinedWithName{0}', this.tenancyName)\r\n            );\r\n            break;\r\n        }\r\n      });\r\n  }\r\n\r\n  close(result?: any): void {\r\n    this._dialogRef.close(result);\r\n  }\r\n}\r\n","module.exports = \"<div\\r\\n  *ngIf=\\\"isMultiTenancyEnabled\\\"\\r\\n  class=\\\"card tenant-change-component\\\"\\r\\n  style=\\\"margin-bottom: 3px;\\\">\\r\\n  <div class=\\\"body text-center\\\">\\r\\n    <span>\\r\\n      {{ \\\"CurrentTenant\\\" | localize }}:\\r\\n      <span *ngIf=\\\"tenancyName\\\" title=\\\"{{ name }}\\\">\\r\\n          <strong>{{ tenancyName }}</strong>\\r\\n      </span>\\r\\n      <span *ngIf=\\\"!tenancyName\\\">{{ \\\"NotSelected\\\" | localize }}</span> \\r\\n      (<a href=\\\"javascript:;\\\" (click)=\\\"showChangeModal()\\\">{{ \\\"Change\\\" | localize }}</a>)\\r\\n    </span>\\r\\n  </div>\\r\\n</div>\\r\\n\"","﻿import { Component, OnInit, Injector } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { AppComponentBase } from '@shared/app-component-base';\r\nimport { TenantChangeDialogComponent } from './tenant-change-dialog.component';\r\n\r\n@Component({\r\n  selector: 'tenant-change',\r\n  templateUrl: './tenant-change.component.html'\r\n})\r\nexport class TenantChangeComponent extends AppComponentBase implements OnInit {\r\n  tenancyName = '';\r\n  name = '';\r\n\r\n  constructor(injector: Injector, private _dialog: MatDialog) {\r\n    super(injector);\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.appSession.tenant) {\r\n      this.tenancyName = this.appSession.tenant.tenancyName;\r\n      this.name = this.appSession.tenant.name;\r\n    }\r\n  }\r\n\r\n  get isMultiTenancyEnabled(): boolean {\r\n    return abp.multiTenancy.isEnabled;\r\n  }\r\n\r\n  showChangeModal(): void {\r\n    this._dialog.open(TenantChangeDialogComponent, {\r\n      width: '500px',\r\n      height: '240px',\r\n      position: {\r\n        top: '50px'\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { IsTenantAvailableOutputState } from '@shared/service-proxies/service-proxies';\r\n\r\n\r\nexport class AppTenantAvailabilityState {\r\n    static Available: number = IsTenantAvailableOutputState._1;\r\n    static InActive: number = IsTenantAvailableOutputState._2;\r\n    static NotFound: number = IsTenantAvailableOutputState._3;\r\n}\r\n","export class UrlHelper {\r\n    /**\r\n     * The URL requested, before initial routing.\r\n     */\r\n    static readonly initialUrl = location.href;\r\n\r\n    static getQueryParameters(): any {\r\n        return document.location.search\r\n            .replace(/(^\\?)/, '')\r\n            .split('&')\r\n            .map(function (n) { return n = n.split('='), this[n[0]] = n[1], this; }.bind({}))[0];\r\n    }\r\n}\r\n"],"sourceRoot":""}